/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package databaseclient;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2022-06-07")
public class CRUD {

  public interface Iface {

    public void insert(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException;

    public String select(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException;

    public void update(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException;

    public void remove(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void insert(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void select(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void update(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void remove(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void insert(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      send_insert(a, b, c, d, e, f, g);
      recv_insert();
    }

    public void send_insert(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      insert_args args = new insert_args();
      args.setA(a);
      args.setB(b);
      args.setC(c);
      args.setD(d);
      args.setE(e);
      args.setF(f);
      args.setG(g);
      sendBase("insert", args);
    }

    public void recv_insert() throws org.apache.thrift.TException
    {
      insert_result result = new insert_result();
      receiveBase(result, "insert");
      return;
    }

    public String select(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      send_select(a, b, c, d, e, f, g);
      return recv_select();
    }

    public void send_select(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      select_args args = new select_args();
      args.setA(a);
      args.setB(b);
      args.setC(c);
      args.setD(d);
      args.setE(e);
      args.setF(f);
      args.setG(g);
      sendBase("select", args);
    }

    public String recv_select() throws org.apache.thrift.TException
    {
      select_result result = new select_result();
      receiveBase(result, "select");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "select failed: unknown result");
    }

    public void update(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      send_update(a, b, c, d, e, f, g);
      recv_update();
    }

    public void send_update(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      update_args args = new update_args();
      args.setA(a);
      args.setB(b);
      args.setC(c);
      args.setD(d);
      args.setE(e);
      args.setF(f);
      args.setG(g);
      sendBase("update", args);
    }

    public void recv_update() throws org.apache.thrift.TException
    {
      update_result result = new update_result();
      receiveBase(result, "update");
      return;
    }

    public void remove(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      send_remove(a, b, c, d, e, f, g);
      recv_remove();
    }

    public void send_remove(String a, String b, String c, String d, String e, String f, String g) throws org.apache.thrift.TException
    {
      remove_args args = new remove_args();
      args.setA(a);
      args.setB(b);
      args.setC(c);
      args.setD(d);
      args.setE(e);
      args.setF(f);
      args.setG(g);
      sendBase("remove", args);
    }

    public void recv_remove() throws org.apache.thrift.TException
    {
      remove_result result = new remove_result();
      receiveBase(result, "remove");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insert(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insert_call method_call = new insert_call(a, b, c, d, e, f, g, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a;
      private String b;
      private String c;
      private String d;
      private String e;
      private String f;
      private String g;
      public insert_call(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = g;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insert_args args = new insert_args();
        args.setA(a);
        args.setB(b);
        args.setC(c);
        args.setD(d);
        args.setE(e);
        args.setF(f);
        args.setG(g);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_insert();
      }
    }

    public void select(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      select_call method_call = new select_call(a, b, c, d, e, f, g, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class select_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a;
      private String b;
      private String c;
      private String d;
      private String e;
      private String f;
      private String g;
      public select_call(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = g;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("select", org.apache.thrift.protocol.TMessageType.CALL, 0));
        select_args args = new select_args();
        args.setA(a);
        args.setB(b);
        args.setC(c);
        args.setD(d);
        args.setE(e);
        args.setF(f);
        args.setG(g);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_select();
      }
    }

    public void update(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      update_call method_call = new update_call(a, b, c, d, e, f, g, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a;
      private String b;
      private String c;
      private String d;
      private String e;
      private String f;
      private String g;
      public update_call(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = g;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
        update_args args = new update_args();
        args.setA(a);
        args.setB(b);
        args.setC(c);
        args.setD(d);
        args.setE(e);
        args.setF(f);
        args.setG(g);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_update();
      }
    }

    public void remove(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_call method_call = new remove_call(a, b, c, d, e, f, g, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class remove_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String a;
      private String b;
      private String c;
      private String d;
      private String e;
      private String f;
      private String g;
      public remove_call(String a, String b, String c, String d, String e, String f, String g, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.e = e;
        this.f = f;
        this.g = g;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_args args = new remove_args();
        args.setA(a);
        args.setB(b);
        args.setC(c);
        args.setD(d);
        args.setE(e);
        args.setF(f);
        args.setG(g);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_remove();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insert", new insert());
      processMap.put("select", new select());
      processMap.put("update", new update());
      processMap.put("remove", new remove());
      return processMap;
    }

    public static class insert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insert_args> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insert_result getResult(I iface, insert_args args) throws org.apache.thrift.TException {
        insert_result result = new insert_result();
        iface.insert(args.a, args.b, args.c, args.d, args.e, args.f, args.g);
        return result;
      }
    }

    public static class select<I extends Iface> extends org.apache.thrift.ProcessFunction<I, select_args> {
      public select() {
        super("select");
      }

      public select_args getEmptyArgsInstance() {
        return new select_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public select_result getResult(I iface, select_args args) throws org.apache.thrift.TException {
        select_result result = new select_result();
        result.success = iface.select(args.a, args.b, args.c, args.d, args.e, args.f, args.g);
        return result;
      }
    }

    public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
        update_result result = new update_result();
        iface.update(args.a, args.b, args.c, args.d, args.e, args.f, args.g);
        return result;
      }
    }

    public static class remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, remove_args> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public remove_result getResult(I iface, remove_args args) throws org.apache.thrift.TException {
        remove_result result = new remove_result();
        iface.remove(args.a, args.b, args.c, args.d, args.e, args.f, args.g);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insert", new insert());
      processMap.put("select", new select());
      processMap.put("update", new update());
      processMap.put("remove", new remove());
      return processMap;
    }

    public static class insert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insert_args, Void> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            insert_result result = new insert_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insert_result result = new insert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insert_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.insert(args.a, args.b, args.c, args.d, args.e, args.f, args.g,resultHandler);
      }
    }

    public static class select<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, select_args, String> {
      public select() {
        super("select");
      }

      public select_args getEmptyArgsInstance() {
        return new select_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            select_result result = new select_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            select_result result = new select_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, select_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.select(args.a, args.b, args.c, args.d, args.e, args.f, args.g,resultHandler);
      }
    }

    public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, Void> {
      public update() {
        super("update");
      }

      public update_args getEmptyArgsInstance() {
        return new update_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            update_result result = new update_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            update_result result = new update_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.update(args.a, args.b, args.c, args.d, args.e, args.f, args.g,resultHandler);
      }
    }

    public static class remove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, remove_args, Void> {
      public remove() {
        super("remove");
      }

      public remove_args getEmptyArgsInstance() {
        return new remove_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            remove_result result = new remove_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            remove_result result = new remove_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, remove_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.remove(args.a, args.b, args.c, args.d, args.e, args.f, args.g,resultHandler);
      }
    }

  }

  public static class insert_args implements org.apache.thrift.TBase<insert_args, insert_args._Fields>, java.io.Serializable, Cloneable, Comparable<insert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_argsTupleSchemeFactory());
    }

    public String a; // required
    public String b; // required
    public String c; // required
    public String d; // required
    public String e; // required
    public String f; // required
    public String g; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a"),
      B((short)2, "b"),
      C((short)3, "c"),
      D((short)4, "d"),
      E((short)5, "e"),
      F((short)6, "f"),
      G((short)7, "g");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          case 2: // B
            return B;
          case 3: // C
            return C;
          case 4: // D
            return D;
          case 5: // E
            return E;
          case 6: // F
            return F;
          case 7: // G
            return G;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_args.class, metaDataMap);
    }

    public insert_args() {
    }

    public insert_args(
      String a,
      String b,
      String c,
      String d,
      String e,
      String f,
      String g)
    {
      this();
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.e = e;
      this.f = f;
      this.g = g;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_args(insert_args other) {
      if (other.isSetA()) {
        this.a = other.a;
      }
      if (other.isSetB()) {
        this.b = other.b;
      }
      if (other.isSetC()) {
        this.c = other.c;
      }
      if (other.isSetD()) {
        this.d = other.d;
      }
      if (other.isSetE()) {
        this.e = other.e;
      }
      if (other.isSetF()) {
        this.f = other.f;
      }
      if (other.isSetG()) {
        this.g = other.g;
      }
    }

    public insert_args deepCopy() {
      return new insert_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
      this.b = null;
      this.c = null;
      this.d = null;
      this.e = null;
      this.f = null;
      this.g = null;
    }

    public String getA() {
      return this.a;
    }

    public insert_args setA(String a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public String getB() {
      return this.b;
    }

    public insert_args setB(String b) {
      this.b = b;
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public String getC() {
      return this.c;
    }

    public insert_args setC(String c) {
      this.c = c;
      return this;
    }

    public void unsetC() {
      this.c = null;
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
      return this.c != null;
    }

    public void setCIsSet(boolean value) {
      if (!value) {
        this.c = null;
      }
    }

    public String getD() {
      return this.d;
    }

    public insert_args setD(String d) {
      this.d = d;
      return this;
    }

    public void unsetD() {
      this.d = null;
    }

    /** Returns true if field d is set (has been assigned a value) and false otherwise */
    public boolean isSetD() {
      return this.d != null;
    }

    public void setDIsSet(boolean value) {
      if (!value) {
        this.d = null;
      }
    }

    public String getE() {
      return this.e;
    }

    public insert_args setE(String e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public String getF() {
      return this.f;
    }

    public insert_args setF(String f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been assigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public String getG() {
      return this.g;
    }

    public insert_args setG(String g) {
      this.g = g;
      return this;
    }

    public void unsetG() {
      this.g = null;
    }

    /** Returns true if field g is set (has been assigned a value) and false otherwise */
    public boolean isSetG() {
      return this.g != null;
    }

    public void setGIsSet(boolean value) {
      if (!value) {
        this.g = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((String)value);
        }
        break;

      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((String)value);
        }
        break;

      case C:
        if (value == null) {
          unsetC();
        } else {
          setC((String)value);
        }
        break;

      case D:
        if (value == null) {
          unsetD();
        } else {
          setD((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((String)value);
        }
        break;

      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((String)value);
        }
        break;

      case G:
        if (value == null) {
          unsetG();
        } else {
          setG((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      case B:
        return getB();

      case C:
        return getC();

      case D:
        return getD();

      case E:
        return getE();

      case F:
        return getF();

      case G:
        return getG();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      case B:
        return isSetB();
      case C:
        return isSetC();
      case D:
        return isSetD();
      case E:
        return isSetE();
      case F:
        return isSetF();
      case G:
        return isSetG();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_args)
        return this.equals((insert_args)that);
      return false;
    }

    public boolean equals(insert_args that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      boolean this_present_c = true && this.isSetC();
      boolean that_present_c = true && that.isSetC();
      if (this_present_c || that_present_c) {
        if (!(this_present_c && that_present_c))
          return false;
        if (!this.c.equals(that.c))
          return false;
      }

      boolean this_present_d = true && this.isSetD();
      boolean that_present_d = true && that.isSetD();
      if (this_present_d || that_present_d) {
        if (!(this_present_d && that_present_d))
          return false;
        if (!this.d.equals(that.d))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      boolean this_present_g = true && this.isSetG();
      boolean that_present_g = true && that.isSetG();
      if (this_present_g || that_present_g) {
        if (!(this_present_g && that_present_g))
          return false;
        if (!this.g.equals(that.g))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_a = true && (isSetA());
      list.add(present_a);
      if (present_a)
        list.add(a);

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      boolean present_c = true && (isSetC());
      list.add(present_c);
      if (present_c)
        list.add(c);

      boolean present_d = true && (isSetD());
      list.add(present_d);
      if (present_d)
        list.add(d);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      boolean present_f = true && (isSetF());
      list.add(present_f);
      if (present_f)
        list.add(f);

      boolean present_g = true && (isSetG());
      list.add(present_g);
      if (present_g)
        list.add(g);

      return list.hashCode();
    }

    @Override
    public int compareTo(insert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF()).compareTo(other.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetG()).compareTo(other.isSetG());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetG()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c:");
      if (this.c == null) {
        sb.append("null");
      } else {
        sb.append(this.c);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d:");
      if (this.d == null) {
        sb.append("null");
      } else {
        sb.append(this.d);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("g:");
      if (this.g == null) {
        sb.append("null");
      } else {
        sb.append(this.g);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_argsStandardSchemeFactory implements SchemeFactory {
      public insert_argsStandardScheme getScheme() {
        return new insert_argsStandardScheme();
      }
    }

    private static class insert_argsStandardScheme extends StandardScheme<insert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a = iprot.readString();
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.b = iprot.readString();
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c = iprot.readString();
                struct.setCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d = iprot.readString();
                struct.setDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e = iprot.readString();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // F
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f = iprot.readString();
                struct.setFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // G
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.g = iprot.readString();
                struct.setGIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          oprot.writeString(struct.a);
          oprot.writeFieldEnd();
        }
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          oprot.writeString(struct.b);
          oprot.writeFieldEnd();
        }
        if (struct.c != null) {
          oprot.writeFieldBegin(C_FIELD_DESC);
          oprot.writeString(struct.c);
          oprot.writeFieldEnd();
        }
        if (struct.d != null) {
          oprot.writeFieldBegin(D_FIELD_DESC);
          oprot.writeString(struct.d);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          oprot.writeString(struct.e);
          oprot.writeFieldEnd();
        }
        if (struct.f != null) {
          oprot.writeFieldBegin(F_FIELD_DESC);
          oprot.writeString(struct.f);
          oprot.writeFieldEnd();
        }
        if (struct.g != null) {
          oprot.writeFieldBegin(G_FIELD_DESC);
          oprot.writeString(struct.g);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_argsTupleSchemeFactory implements SchemeFactory {
      public insert_argsTupleScheme getScheme() {
        return new insert_argsTupleScheme();
      }
    }

    private static class insert_argsTupleScheme extends TupleScheme<insert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        if (struct.isSetB()) {
          optionals.set(1);
        }
        if (struct.isSetC()) {
          optionals.set(2);
        }
        if (struct.isSetD()) {
          optionals.set(3);
        }
        if (struct.isSetE()) {
          optionals.set(4);
        }
        if (struct.isSetF()) {
          optionals.set(5);
        }
        if (struct.isSetG()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetA()) {
          oprot.writeString(struct.a);
        }
        if (struct.isSetB()) {
          oprot.writeString(struct.b);
        }
        if (struct.isSetC()) {
          oprot.writeString(struct.c);
        }
        if (struct.isSetD()) {
          oprot.writeString(struct.d);
        }
        if (struct.isSetE()) {
          oprot.writeString(struct.e);
        }
        if (struct.isSetF()) {
          oprot.writeString(struct.f);
        }
        if (struct.isSetG()) {
          oprot.writeString(struct.g);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.a = iprot.readString();
          struct.setAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.b = iprot.readString();
          struct.setBIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c = iprot.readString();
          struct.setCIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d = iprot.readString();
          struct.setDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.e = iprot.readString();
          struct.setEIsSet(true);
        }
        if (incoming.get(5)) {
          struct.f = iprot.readString();
          struct.setFIsSet(true);
        }
        if (incoming.get(6)) {
          struct.g = iprot.readString();
          struct.setGIsSet(true);
        }
      }
    }

  }

  public static class insert_result implements org.apache.thrift.TBase<insert_result, insert_result._Fields>, java.io.Serializable, Cloneable, Comparable<insert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_result.class, metaDataMap);
    }

    public insert_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_result(insert_result other) {
    }

    public insert_result deepCopy() {
      return new insert_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_result)
        return this.equals((insert_result)that);
      return false;
    }

    public boolean equals(insert_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(insert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_resultStandardSchemeFactory implements SchemeFactory {
      public insert_resultStandardScheme getScheme() {
        return new insert_resultStandardScheme();
      }
    }

    private static class insert_resultStandardScheme extends StandardScheme<insert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_resultTupleSchemeFactory implements SchemeFactory {
      public insert_resultTupleScheme getScheme() {
        return new insert_resultTupleScheme();
      }
    }

    private static class insert_resultTupleScheme extends TupleScheme<insert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class select_args implements org.apache.thrift.TBase<select_args, select_args._Fields>, java.io.Serializable, Cloneable, Comparable<select_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_argsTupleSchemeFactory());
    }

    public String a; // required
    public String b; // required
    public String c; // required
    public String d; // required
    public String e; // required
    public String f; // required
    public String g; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a"),
      B((short)2, "b"),
      C((short)3, "c"),
      D((short)4, "d"),
      E((short)5, "e"),
      F((short)6, "f"),
      G((short)7, "g");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          case 2: // B
            return B;
          case 3: // C
            return C;
          case 4: // D
            return D;
          case 5: // E
            return E;
          case 6: // F
            return F;
          case 7: // G
            return G;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_args.class, metaDataMap);
    }

    public select_args() {
    }

    public select_args(
      String a,
      String b,
      String c,
      String d,
      String e,
      String f,
      String g)
    {
      this();
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.e = e;
      this.f = f;
      this.g = g;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_args(select_args other) {
      if (other.isSetA()) {
        this.a = other.a;
      }
      if (other.isSetB()) {
        this.b = other.b;
      }
      if (other.isSetC()) {
        this.c = other.c;
      }
      if (other.isSetD()) {
        this.d = other.d;
      }
      if (other.isSetE()) {
        this.e = other.e;
      }
      if (other.isSetF()) {
        this.f = other.f;
      }
      if (other.isSetG()) {
        this.g = other.g;
      }
    }

    public select_args deepCopy() {
      return new select_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
      this.b = null;
      this.c = null;
      this.d = null;
      this.e = null;
      this.f = null;
      this.g = null;
    }

    public String getA() {
      return this.a;
    }

    public select_args setA(String a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public String getB() {
      return this.b;
    }

    public select_args setB(String b) {
      this.b = b;
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public String getC() {
      return this.c;
    }

    public select_args setC(String c) {
      this.c = c;
      return this;
    }

    public void unsetC() {
      this.c = null;
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
      return this.c != null;
    }

    public void setCIsSet(boolean value) {
      if (!value) {
        this.c = null;
      }
    }

    public String getD() {
      return this.d;
    }

    public select_args setD(String d) {
      this.d = d;
      return this;
    }

    public void unsetD() {
      this.d = null;
    }

    /** Returns true if field d is set (has been assigned a value) and false otherwise */
    public boolean isSetD() {
      return this.d != null;
    }

    public void setDIsSet(boolean value) {
      if (!value) {
        this.d = null;
      }
    }

    public String getE() {
      return this.e;
    }

    public select_args setE(String e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public String getF() {
      return this.f;
    }

    public select_args setF(String f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been assigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public String getG() {
      return this.g;
    }

    public select_args setG(String g) {
      this.g = g;
      return this;
    }

    public void unsetG() {
      this.g = null;
    }

    /** Returns true if field g is set (has been assigned a value) and false otherwise */
    public boolean isSetG() {
      return this.g != null;
    }

    public void setGIsSet(boolean value) {
      if (!value) {
        this.g = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((String)value);
        }
        break;

      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((String)value);
        }
        break;

      case C:
        if (value == null) {
          unsetC();
        } else {
          setC((String)value);
        }
        break;

      case D:
        if (value == null) {
          unsetD();
        } else {
          setD((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((String)value);
        }
        break;

      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((String)value);
        }
        break;

      case G:
        if (value == null) {
          unsetG();
        } else {
          setG((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      case B:
        return getB();

      case C:
        return getC();

      case D:
        return getD();

      case E:
        return getE();

      case F:
        return getF();

      case G:
        return getG();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      case B:
        return isSetB();
      case C:
        return isSetC();
      case D:
        return isSetD();
      case E:
        return isSetE();
      case F:
        return isSetF();
      case G:
        return isSetG();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_args)
        return this.equals((select_args)that);
      return false;
    }

    public boolean equals(select_args that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      boolean this_present_c = true && this.isSetC();
      boolean that_present_c = true && that.isSetC();
      if (this_present_c || that_present_c) {
        if (!(this_present_c && that_present_c))
          return false;
        if (!this.c.equals(that.c))
          return false;
      }

      boolean this_present_d = true && this.isSetD();
      boolean that_present_d = true && that.isSetD();
      if (this_present_d || that_present_d) {
        if (!(this_present_d && that_present_d))
          return false;
        if (!this.d.equals(that.d))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      boolean this_present_g = true && this.isSetG();
      boolean that_present_g = true && that.isSetG();
      if (this_present_g || that_present_g) {
        if (!(this_present_g && that_present_g))
          return false;
        if (!this.g.equals(that.g))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_a = true && (isSetA());
      list.add(present_a);
      if (present_a)
        list.add(a);

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      boolean present_c = true && (isSetC());
      list.add(present_c);
      if (present_c)
        list.add(c);

      boolean present_d = true && (isSetD());
      list.add(present_d);
      if (present_d)
        list.add(d);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      boolean present_f = true && (isSetF());
      list.add(present_f);
      if (present_f)
        list.add(f);

      boolean present_g = true && (isSetG());
      list.add(present_g);
      if (present_g)
        list.add(g);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF()).compareTo(other.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetG()).compareTo(other.isSetG());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetG()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c:");
      if (this.c == null) {
        sb.append("null");
      } else {
        sb.append(this.c);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d:");
      if (this.d == null) {
        sb.append("null");
      } else {
        sb.append(this.d);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("g:");
      if (this.g == null) {
        sb.append("null");
      } else {
        sb.append(this.g);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_argsStandardSchemeFactory implements SchemeFactory {
      public select_argsStandardScheme getScheme() {
        return new select_argsStandardScheme();
      }
    }

    private static class select_argsStandardScheme extends StandardScheme<select_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a = iprot.readString();
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.b = iprot.readString();
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c = iprot.readString();
                struct.setCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d = iprot.readString();
                struct.setDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e = iprot.readString();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // F
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f = iprot.readString();
                struct.setFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // G
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.g = iprot.readString();
                struct.setGIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          oprot.writeString(struct.a);
          oprot.writeFieldEnd();
        }
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          oprot.writeString(struct.b);
          oprot.writeFieldEnd();
        }
        if (struct.c != null) {
          oprot.writeFieldBegin(C_FIELD_DESC);
          oprot.writeString(struct.c);
          oprot.writeFieldEnd();
        }
        if (struct.d != null) {
          oprot.writeFieldBegin(D_FIELD_DESC);
          oprot.writeString(struct.d);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          oprot.writeString(struct.e);
          oprot.writeFieldEnd();
        }
        if (struct.f != null) {
          oprot.writeFieldBegin(F_FIELD_DESC);
          oprot.writeString(struct.f);
          oprot.writeFieldEnd();
        }
        if (struct.g != null) {
          oprot.writeFieldBegin(G_FIELD_DESC);
          oprot.writeString(struct.g);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_argsTupleSchemeFactory implements SchemeFactory {
      public select_argsTupleScheme getScheme() {
        return new select_argsTupleScheme();
      }
    }

    private static class select_argsTupleScheme extends TupleScheme<select_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        if (struct.isSetB()) {
          optionals.set(1);
        }
        if (struct.isSetC()) {
          optionals.set(2);
        }
        if (struct.isSetD()) {
          optionals.set(3);
        }
        if (struct.isSetE()) {
          optionals.set(4);
        }
        if (struct.isSetF()) {
          optionals.set(5);
        }
        if (struct.isSetG()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetA()) {
          oprot.writeString(struct.a);
        }
        if (struct.isSetB()) {
          oprot.writeString(struct.b);
        }
        if (struct.isSetC()) {
          oprot.writeString(struct.c);
        }
        if (struct.isSetD()) {
          oprot.writeString(struct.d);
        }
        if (struct.isSetE()) {
          oprot.writeString(struct.e);
        }
        if (struct.isSetF()) {
          oprot.writeString(struct.f);
        }
        if (struct.isSetG()) {
          oprot.writeString(struct.g);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.a = iprot.readString();
          struct.setAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.b = iprot.readString();
          struct.setBIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c = iprot.readString();
          struct.setCIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d = iprot.readString();
          struct.setDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.e = iprot.readString();
          struct.setEIsSet(true);
        }
        if (incoming.get(5)) {
          struct.f = iprot.readString();
          struct.setFIsSet(true);
        }
        if (incoming.get(6)) {
          struct.g = iprot.readString();
          struct.setGIsSet(true);
        }
      }
    }

  }

  public static class select_result implements org.apache.thrift.TBase<select_result, select_result._Fields>, java.io.Serializable, Cloneable, Comparable<select_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("select_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new select_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new select_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(select_result.class, metaDataMap);
    }

    public select_result() {
    }

    public select_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public select_result(select_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public select_result deepCopy() {
      return new select_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public select_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof select_result)
        return this.equals((select_result)that);
      return false;
    }

    public boolean equals(select_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(select_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("select_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class select_resultStandardSchemeFactory implements SchemeFactory {
      public select_resultStandardScheme getScheme() {
        return new select_resultStandardScheme();
      }
    }

    private static class select_resultStandardScheme extends StandardScheme<select_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, select_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, select_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class select_resultTupleSchemeFactory implements SchemeFactory {
      public select_resultTupleScheme getScheme() {
        return new select_resultTupleScheme();
      }
    }

    private static class select_resultTupleScheme extends TupleScheme<select_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, select_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, select_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
    }

    public String a; // required
    public String b; // required
    public String c; // required
    public String d; // required
    public String e; // required
    public String f; // required
    public String g; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a"),
      B((short)2, "b"),
      C((short)3, "c"),
      D((short)4, "d"),
      E((short)5, "e"),
      F((short)6, "f"),
      G((short)7, "g");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          case 2: // B
            return B;
          case 3: // C
            return C;
          case 4: // D
            return D;
          case 5: // E
            return E;
          case 6: // F
            return F;
          case 7: // G
            return G;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
    }

    public update_args() {
    }

    public update_args(
      String a,
      String b,
      String c,
      String d,
      String e,
      String f,
      String g)
    {
      this();
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.e = e;
      this.f = f;
      this.g = g;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_args(update_args other) {
      if (other.isSetA()) {
        this.a = other.a;
      }
      if (other.isSetB()) {
        this.b = other.b;
      }
      if (other.isSetC()) {
        this.c = other.c;
      }
      if (other.isSetD()) {
        this.d = other.d;
      }
      if (other.isSetE()) {
        this.e = other.e;
      }
      if (other.isSetF()) {
        this.f = other.f;
      }
      if (other.isSetG()) {
        this.g = other.g;
      }
    }

    public update_args deepCopy() {
      return new update_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
      this.b = null;
      this.c = null;
      this.d = null;
      this.e = null;
      this.f = null;
      this.g = null;
    }

    public String getA() {
      return this.a;
    }

    public update_args setA(String a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public String getB() {
      return this.b;
    }

    public update_args setB(String b) {
      this.b = b;
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public String getC() {
      return this.c;
    }

    public update_args setC(String c) {
      this.c = c;
      return this;
    }

    public void unsetC() {
      this.c = null;
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
      return this.c != null;
    }

    public void setCIsSet(boolean value) {
      if (!value) {
        this.c = null;
      }
    }

    public String getD() {
      return this.d;
    }

    public update_args setD(String d) {
      this.d = d;
      return this;
    }

    public void unsetD() {
      this.d = null;
    }

    /** Returns true if field d is set (has been assigned a value) and false otherwise */
    public boolean isSetD() {
      return this.d != null;
    }

    public void setDIsSet(boolean value) {
      if (!value) {
        this.d = null;
      }
    }

    public String getE() {
      return this.e;
    }

    public update_args setE(String e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public String getF() {
      return this.f;
    }

    public update_args setF(String f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been assigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public String getG() {
      return this.g;
    }

    public update_args setG(String g) {
      this.g = g;
      return this;
    }

    public void unsetG() {
      this.g = null;
    }

    /** Returns true if field g is set (has been assigned a value) and false otherwise */
    public boolean isSetG() {
      return this.g != null;
    }

    public void setGIsSet(boolean value) {
      if (!value) {
        this.g = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((String)value);
        }
        break;

      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((String)value);
        }
        break;

      case C:
        if (value == null) {
          unsetC();
        } else {
          setC((String)value);
        }
        break;

      case D:
        if (value == null) {
          unsetD();
        } else {
          setD((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((String)value);
        }
        break;

      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((String)value);
        }
        break;

      case G:
        if (value == null) {
          unsetG();
        } else {
          setG((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      case B:
        return getB();

      case C:
        return getC();

      case D:
        return getD();

      case E:
        return getE();

      case F:
        return getF();

      case G:
        return getG();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      case B:
        return isSetB();
      case C:
        return isSetC();
      case D:
        return isSetD();
      case E:
        return isSetE();
      case F:
        return isSetF();
      case G:
        return isSetG();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_args)
        return this.equals((update_args)that);
      return false;
    }

    public boolean equals(update_args that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      boolean this_present_c = true && this.isSetC();
      boolean that_present_c = true && that.isSetC();
      if (this_present_c || that_present_c) {
        if (!(this_present_c && that_present_c))
          return false;
        if (!this.c.equals(that.c))
          return false;
      }

      boolean this_present_d = true && this.isSetD();
      boolean that_present_d = true && that.isSetD();
      if (this_present_d || that_present_d) {
        if (!(this_present_d && that_present_d))
          return false;
        if (!this.d.equals(that.d))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      boolean this_present_g = true && this.isSetG();
      boolean that_present_g = true && that.isSetG();
      if (this_present_g || that_present_g) {
        if (!(this_present_g && that_present_g))
          return false;
        if (!this.g.equals(that.g))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_a = true && (isSetA());
      list.add(present_a);
      if (present_a)
        list.add(a);

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      boolean present_c = true && (isSetC());
      list.add(present_c);
      if (present_c)
        list.add(c);

      boolean present_d = true && (isSetD());
      list.add(present_d);
      if (present_d)
        list.add(d);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      boolean present_f = true && (isSetF());
      list.add(present_f);
      if (present_f)
        list.add(f);

      boolean present_g = true && (isSetG());
      list.add(present_g);
      if (present_g)
        list.add(g);

      return list.hashCode();
    }

    @Override
    public int compareTo(update_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF()).compareTo(other.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetG()).compareTo(other.isSetG());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetG()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c:");
      if (this.c == null) {
        sb.append("null");
      } else {
        sb.append(this.c);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d:");
      if (this.d == null) {
        sb.append("null");
      } else {
        sb.append(this.d);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("g:");
      if (this.g == null) {
        sb.append("null");
      } else {
        sb.append(this.g);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_argsStandardSchemeFactory implements SchemeFactory {
      public update_argsStandardScheme getScheme() {
        return new update_argsStandardScheme();
      }
    }

    private static class update_argsStandardScheme extends StandardScheme<update_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a = iprot.readString();
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.b = iprot.readString();
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c = iprot.readString();
                struct.setCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d = iprot.readString();
                struct.setDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e = iprot.readString();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // F
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f = iprot.readString();
                struct.setFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // G
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.g = iprot.readString();
                struct.setGIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          oprot.writeString(struct.a);
          oprot.writeFieldEnd();
        }
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          oprot.writeString(struct.b);
          oprot.writeFieldEnd();
        }
        if (struct.c != null) {
          oprot.writeFieldBegin(C_FIELD_DESC);
          oprot.writeString(struct.c);
          oprot.writeFieldEnd();
        }
        if (struct.d != null) {
          oprot.writeFieldBegin(D_FIELD_DESC);
          oprot.writeString(struct.d);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          oprot.writeString(struct.e);
          oprot.writeFieldEnd();
        }
        if (struct.f != null) {
          oprot.writeFieldBegin(F_FIELD_DESC);
          oprot.writeString(struct.f);
          oprot.writeFieldEnd();
        }
        if (struct.g != null) {
          oprot.writeFieldBegin(G_FIELD_DESC);
          oprot.writeString(struct.g);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_argsTupleSchemeFactory implements SchemeFactory {
      public update_argsTupleScheme getScheme() {
        return new update_argsTupleScheme();
      }
    }

    private static class update_argsTupleScheme extends TupleScheme<update_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        if (struct.isSetB()) {
          optionals.set(1);
        }
        if (struct.isSetC()) {
          optionals.set(2);
        }
        if (struct.isSetD()) {
          optionals.set(3);
        }
        if (struct.isSetE()) {
          optionals.set(4);
        }
        if (struct.isSetF()) {
          optionals.set(5);
        }
        if (struct.isSetG()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetA()) {
          oprot.writeString(struct.a);
        }
        if (struct.isSetB()) {
          oprot.writeString(struct.b);
        }
        if (struct.isSetC()) {
          oprot.writeString(struct.c);
        }
        if (struct.isSetD()) {
          oprot.writeString(struct.d);
        }
        if (struct.isSetE()) {
          oprot.writeString(struct.e);
        }
        if (struct.isSetF()) {
          oprot.writeString(struct.f);
        }
        if (struct.isSetG()) {
          oprot.writeString(struct.g);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.a = iprot.readString();
          struct.setAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.b = iprot.readString();
          struct.setBIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c = iprot.readString();
          struct.setCIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d = iprot.readString();
          struct.setDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.e = iprot.readString();
          struct.setEIsSet(true);
        }
        if (incoming.get(5)) {
          struct.f = iprot.readString();
          struct.setFIsSet(true);
        }
        if (incoming.get(6)) {
          struct.g = iprot.readString();
          struct.setGIsSet(true);
        }
      }
    }

  }

  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
    }

    public update_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public update_result(update_result other) {
    }

    public update_result deepCopy() {
      return new update_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof update_result)
        return this.equals((update_result)that);
      return false;
    }

    public boolean equals(update_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(update_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("update_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class update_resultStandardSchemeFactory implements SchemeFactory {
      public update_resultStandardScheme getScheme() {
        return new update_resultStandardScheme();
      }
    }

    private static class update_resultStandardScheme extends StandardScheme<update_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class update_resultTupleSchemeFactory implements SchemeFactory {
      public update_resultTupleScheme getScheme() {
        return new update_resultTupleScheme();
      }
    }

    private static class update_resultTupleScheme extends TupleScheme<update_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class remove_args implements org.apache.thrift.TBase<remove_args, remove_args._Fields>, java.io.Serializable, Cloneable, Comparable<remove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_args");

    private static final org.apache.thrift.protocol.TField A_FIELD_DESC = new org.apache.thrift.protocol.TField("a", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField C_FIELD_DESC = new org.apache.thrift.protocol.TField("c", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField F_FIELD_DESC = new org.apache.thrift.protocol.TField("f", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_argsTupleSchemeFactory());
    }

    public String a; // required
    public String b; // required
    public String c; // required
    public String d; // required
    public String e; // required
    public String f; // required
    public String g; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      A((short)1, "a"),
      B((short)2, "b"),
      C((short)3, "c"),
      D((short)4, "d"),
      E((short)5, "e"),
      F((short)6, "f"),
      G((short)7, "g");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // A
            return A;
          case 2: // B
            return B;
          case 3: // C
            return C;
          case 4: // D
            return D;
          case 5: // E
            return E;
          case 6: // F
            return F;
          case 7: // G
            return G;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.A, new org.apache.thrift.meta_data.FieldMetaData("a", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.C, new org.apache.thrift.meta_data.FieldMetaData("c", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.F, new org.apache.thrift.meta_data.FieldMetaData("f", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_args.class, metaDataMap);
    }

    public remove_args() {
    }

    public remove_args(
      String a,
      String b,
      String c,
      String d,
      String e,
      String f,
      String g)
    {
      this();
      this.a = a;
      this.b = b;
      this.c = c;
      this.d = d;
      this.e = e;
      this.f = f;
      this.g = g;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_args(remove_args other) {
      if (other.isSetA()) {
        this.a = other.a;
      }
      if (other.isSetB()) {
        this.b = other.b;
      }
      if (other.isSetC()) {
        this.c = other.c;
      }
      if (other.isSetD()) {
        this.d = other.d;
      }
      if (other.isSetE()) {
        this.e = other.e;
      }
      if (other.isSetF()) {
        this.f = other.f;
      }
      if (other.isSetG()) {
        this.g = other.g;
      }
    }

    public remove_args deepCopy() {
      return new remove_args(this);
    }

    @Override
    public void clear() {
      this.a = null;
      this.b = null;
      this.c = null;
      this.d = null;
      this.e = null;
      this.f = null;
      this.g = null;
    }

    public String getA() {
      return this.a;
    }

    public remove_args setA(String a) {
      this.a = a;
      return this;
    }

    public void unsetA() {
      this.a = null;
    }

    /** Returns true if field a is set (has been assigned a value) and false otherwise */
    public boolean isSetA() {
      return this.a != null;
    }

    public void setAIsSet(boolean value) {
      if (!value) {
        this.a = null;
      }
    }

    public String getB() {
      return this.b;
    }

    public remove_args setB(String b) {
      this.b = b;
      return this;
    }

    public void unsetB() {
      this.b = null;
    }

    /** Returns true if field b is set (has been assigned a value) and false otherwise */
    public boolean isSetB() {
      return this.b != null;
    }

    public void setBIsSet(boolean value) {
      if (!value) {
        this.b = null;
      }
    }

    public String getC() {
      return this.c;
    }

    public remove_args setC(String c) {
      this.c = c;
      return this;
    }

    public void unsetC() {
      this.c = null;
    }

    /** Returns true if field c is set (has been assigned a value) and false otherwise */
    public boolean isSetC() {
      return this.c != null;
    }

    public void setCIsSet(boolean value) {
      if (!value) {
        this.c = null;
      }
    }

    public String getD() {
      return this.d;
    }

    public remove_args setD(String d) {
      this.d = d;
      return this;
    }

    public void unsetD() {
      this.d = null;
    }

    /** Returns true if field d is set (has been assigned a value) and false otherwise */
    public boolean isSetD() {
      return this.d != null;
    }

    public void setDIsSet(boolean value) {
      if (!value) {
        this.d = null;
      }
    }

    public String getE() {
      return this.e;
    }

    public remove_args setE(String e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public String getF() {
      return this.f;
    }

    public remove_args setF(String f) {
      this.f = f;
      return this;
    }

    public void unsetF() {
      this.f = null;
    }

    /** Returns true if field f is set (has been assigned a value) and false otherwise */
    public boolean isSetF() {
      return this.f != null;
    }

    public void setFIsSet(boolean value) {
      if (!value) {
        this.f = null;
      }
    }

    public String getG() {
      return this.g;
    }

    public remove_args setG(String g) {
      this.g = g;
      return this;
    }

    public void unsetG() {
      this.g = null;
    }

    /** Returns true if field g is set (has been assigned a value) and false otherwise */
    public boolean isSetG() {
      return this.g != null;
    }

    public void setGIsSet(boolean value) {
      if (!value) {
        this.g = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case A:
        if (value == null) {
          unsetA();
        } else {
          setA((String)value);
        }
        break;

      case B:
        if (value == null) {
          unsetB();
        } else {
          setB((String)value);
        }
        break;

      case C:
        if (value == null) {
          unsetC();
        } else {
          setC((String)value);
        }
        break;

      case D:
        if (value == null) {
          unsetD();
        } else {
          setD((String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((String)value);
        }
        break;

      case F:
        if (value == null) {
          unsetF();
        } else {
          setF((String)value);
        }
        break;

      case G:
        if (value == null) {
          unsetG();
        } else {
          setG((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case A:
        return getA();

      case B:
        return getB();

      case C:
        return getC();

      case D:
        return getD();

      case E:
        return getE();

      case F:
        return getF();

      case G:
        return getG();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case A:
        return isSetA();
      case B:
        return isSetB();
      case C:
        return isSetC();
      case D:
        return isSetD();
      case E:
        return isSetE();
      case F:
        return isSetF();
      case G:
        return isSetG();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_args)
        return this.equals((remove_args)that);
      return false;
    }

    public boolean equals(remove_args that) {
      if (that == null)
        return false;

      boolean this_present_a = true && this.isSetA();
      boolean that_present_a = true && that.isSetA();
      if (this_present_a || that_present_a) {
        if (!(this_present_a && that_present_a))
          return false;
        if (!this.a.equals(that.a))
          return false;
      }

      boolean this_present_b = true && this.isSetB();
      boolean that_present_b = true && that.isSetB();
      if (this_present_b || that_present_b) {
        if (!(this_present_b && that_present_b))
          return false;
        if (!this.b.equals(that.b))
          return false;
      }

      boolean this_present_c = true && this.isSetC();
      boolean that_present_c = true && that.isSetC();
      if (this_present_c || that_present_c) {
        if (!(this_present_c && that_present_c))
          return false;
        if (!this.c.equals(that.c))
          return false;
      }

      boolean this_present_d = true && this.isSetD();
      boolean that_present_d = true && that.isSetD();
      if (this_present_d || that_present_d) {
        if (!(this_present_d && that_present_d))
          return false;
        if (!this.d.equals(that.d))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      boolean this_present_f = true && this.isSetF();
      boolean that_present_f = true && that.isSetF();
      if (this_present_f || that_present_f) {
        if (!(this_present_f && that_present_f))
          return false;
        if (!this.f.equals(that.f))
          return false;
      }

      boolean this_present_g = true && this.isSetG();
      boolean that_present_g = true && that.isSetG();
      if (this_present_g || that_present_g) {
        if (!(this_present_g && that_present_g))
          return false;
        if (!this.g.equals(that.g))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_a = true && (isSetA());
      list.add(present_a);
      if (present_a)
        list.add(a);

      boolean present_b = true && (isSetB());
      list.add(present_b);
      if (present_b)
        list.add(b);

      boolean present_c = true && (isSetC());
      list.add(present_c);
      if (present_c)
        list.add(c);

      boolean present_d = true && (isSetD());
      list.add(present_d);
      if (present_d)
        list.add(d);

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      boolean present_f = true && (isSetF());
      list.add(present_f);
      if (present_f)
        list.add(f);

      boolean present_g = true && (isSetG());
      list.add(present_g);
      if (present_g)
        list.add(g);

      return list.hashCode();
    }

    @Override
    public int compareTo(remove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetA()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.a, other.a);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetB()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetC()).compareTo(other.isSetC());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetC()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.c, other.c);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetD()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetF()).compareTo(other.isSetF());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetF()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.f, other.f);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetG()).compareTo(other.isSetG());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetG()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_args(");
      boolean first = true;

      sb.append("a:");
      if (this.a == null) {
        sb.append("null");
      } else {
        sb.append(this.a);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("b:");
      if (this.b == null) {
        sb.append("null");
      } else {
        sb.append(this.b);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("c:");
      if (this.c == null) {
        sb.append("null");
      } else {
        sb.append(this.c);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("d:");
      if (this.d == null) {
        sb.append("null");
      } else {
        sb.append(this.d);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("f:");
      if (this.f == null) {
        sb.append("null");
      } else {
        sb.append(this.f);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("g:");
      if (this.g == null) {
        sb.append("null");
      } else {
        sb.append(this.g);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_argsStandardSchemeFactory implements SchemeFactory {
      public remove_argsStandardScheme getScheme() {
        return new remove_argsStandardScheme();
      }
    }

    private static class remove_argsStandardScheme extends StandardScheme<remove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // A
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.a = iprot.readString();
                struct.setAIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // B
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.b = iprot.readString();
                struct.setBIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // C
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.c = iprot.readString();
                struct.setCIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // D
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.d = iprot.readString();
                struct.setDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.e = iprot.readString();
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // F
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.f = iprot.readString();
                struct.setFIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // G
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.g = iprot.readString();
                struct.setGIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.a != null) {
          oprot.writeFieldBegin(A_FIELD_DESC);
          oprot.writeString(struct.a);
          oprot.writeFieldEnd();
        }
        if (struct.b != null) {
          oprot.writeFieldBegin(B_FIELD_DESC);
          oprot.writeString(struct.b);
          oprot.writeFieldEnd();
        }
        if (struct.c != null) {
          oprot.writeFieldBegin(C_FIELD_DESC);
          oprot.writeString(struct.c);
          oprot.writeFieldEnd();
        }
        if (struct.d != null) {
          oprot.writeFieldBegin(D_FIELD_DESC);
          oprot.writeString(struct.d);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          oprot.writeString(struct.e);
          oprot.writeFieldEnd();
        }
        if (struct.f != null) {
          oprot.writeFieldBegin(F_FIELD_DESC);
          oprot.writeString(struct.f);
          oprot.writeFieldEnd();
        }
        if (struct.g != null) {
          oprot.writeFieldBegin(G_FIELD_DESC);
          oprot.writeString(struct.g);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_argsTupleSchemeFactory implements SchemeFactory {
      public remove_argsTupleScheme getScheme() {
        return new remove_argsTupleScheme();
      }
    }

    private static class remove_argsTupleScheme extends TupleScheme<remove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetA()) {
          optionals.set(0);
        }
        if (struct.isSetB()) {
          optionals.set(1);
        }
        if (struct.isSetC()) {
          optionals.set(2);
        }
        if (struct.isSetD()) {
          optionals.set(3);
        }
        if (struct.isSetE()) {
          optionals.set(4);
        }
        if (struct.isSetF()) {
          optionals.set(5);
        }
        if (struct.isSetG()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetA()) {
          oprot.writeString(struct.a);
        }
        if (struct.isSetB()) {
          oprot.writeString(struct.b);
        }
        if (struct.isSetC()) {
          oprot.writeString(struct.c);
        }
        if (struct.isSetD()) {
          oprot.writeString(struct.d);
        }
        if (struct.isSetE()) {
          oprot.writeString(struct.e);
        }
        if (struct.isSetF()) {
          oprot.writeString(struct.f);
        }
        if (struct.isSetG()) {
          oprot.writeString(struct.g);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.a = iprot.readString();
          struct.setAIsSet(true);
        }
        if (incoming.get(1)) {
          struct.b = iprot.readString();
          struct.setBIsSet(true);
        }
        if (incoming.get(2)) {
          struct.c = iprot.readString();
          struct.setCIsSet(true);
        }
        if (incoming.get(3)) {
          struct.d = iprot.readString();
          struct.setDIsSet(true);
        }
        if (incoming.get(4)) {
          struct.e = iprot.readString();
          struct.setEIsSet(true);
        }
        if (incoming.get(5)) {
          struct.f = iprot.readString();
          struct.setFIsSet(true);
        }
        if (incoming.get(6)) {
          struct.g = iprot.readString();
          struct.setGIsSet(true);
        }
      }
    }

  }

  public static class remove_result implements org.apache.thrift.TBase<remove_result, remove_result._Fields>, java.io.Serializable, Cloneable, Comparable<remove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("remove_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new remove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new remove_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(remove_result.class, metaDataMap);
    }

    public remove_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public remove_result(remove_result other) {
    }

    public remove_result deepCopy() {
      return new remove_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_result)
        return this.equals((remove_result)that);
      return false;
    }

    public boolean equals(remove_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(remove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class remove_resultStandardSchemeFactory implements SchemeFactory {
      public remove_resultStandardScheme getScheme() {
        return new remove_resultStandardScheme();
      }
    }

    private static class remove_resultStandardScheme extends StandardScheme<remove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, remove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class remove_resultTupleSchemeFactory implements SchemeFactory {
      public remove_resultTupleScheme getScheme() {
        return new remove_resultTupleScheme();
      }
    }

    private static class remove_resultTupleScheme extends TupleScheme<remove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
